<!DOCTYPE html>
<html lang="ja">
    <head>
        <meta charset="utf-8" />
        <title>komenuka</title>
        <meta content="komenuka,コメント画像" name="keywords" />
        <meta name="author" content="aaharu" />
        <link href="/css/bootstrap.min.css" rel="stylesheet" />
        <link href="/css/komenuka.css" rel="stylesheet" />
        <link href="/favicon.ico" rel="shortcut icon" type="image/x-icon" />
    </head>
    <body>
        <header>
            <h1>komenuka</h1>
            <p class="lead">URL for edited image.</p>
        </header>
        <form class="form-inline">
            <input id="imageUrlText" type="text" placeholder="Image URL" class="input-large" />
            <button id="imageUrlBtn" type="submit" class="btn btn-primary">読み込む</button>
        </form>
        <div class="row-fluid">
            <div class="span2">
                <div>
                    <button id="rectangleBtn" class="btn">■</button>
                </div>
                <hr />
                <div>
                    <button id="annotateBtn" class="btn">横</button>
                    <button id="tategakiBtn" class="btn">縦</button>
                </div>
                <hr />
                <input id="colorPicker" class="color input-mini" />
            </div>
            <div class="span10">
                <textarea id="drawText" placeholder="描画テキスト"></textarea><br />
                <canvas id="canvas" width="0" height="0"></canvas>
            </div>
        </div>
        <textarea id="outjson" class="input-xxlarge" placeholder="Output JSON"></textarea><br />
        <form class="form-inline">
            <input id="komenukaUrlText" type="text" class="input-xxlarge" placeholder="Output URL" />
            <button id="chkBtn" type="submit" class="btn">check</button>
        </form>
        <img id="komenukaImg" src="http://placehold.jp/150x50.png" />
        <footer>
            using <a href="http://ossipedia.ipa.go.jp/ipafont/index.html">IPAex Font (IPAex Gothic)</a>, <a href="http://twitter.github.io/bootstrap/">Twitter Bootstrap</a> and <a href="https://www.heroku.com/">Heroku</a>.<br />
            <small>&#169; aaharu</small>
        </footer>
        <!--[if lt IE 9]>
            <script src="http://ajax.aspnetcdn.com/ajax/jquery/jquery-1.9.1.min.js"></script>
        <![endif]-->
        <!--[if gte IE 9]><!-->
            <script src="http://ajax.aspnetcdn.com/ajax/jquery/jquery-2.0.0.min.js"></script>
        <!--<![endif]-->
        <script src="/js/jscolor/jscolor.js"></script>
        <script src="http://code.createjs.com/easeljs-0.6.0.min.js"></script>
        <script src="/js/TextEx.js"></script>
        <script type="text/javascript">
        $(function(){
            "use strict";
            var KomenukaCanvas = function KomenukaCanvas(stage){
                var shape, overlay, jsonObj;
                var $out = $("#outjson"), $outUrl = $("#komenukaUrlText"), $color = $("#colorPicker");

                function updateJson(obj){
                    //Objectの結合
                    for (var k in obj) {
                        if (jsonObj[k] === undefined) {
                            jsonObj[k] = obj[k];
                        } else if (jsonObj[k] instanceof Array) {
                            jsonObj[k][(jsonObj[k]).length] = obj[k];
                        } else {
                            jsonObj[k] = [jsonObj[k], obj[k]];
                        }
                    }
                    //HTMLの更新
                    $out.val(JSON.stringify(jsonObj));
                    var url = $("#imageUrlText").val();
                    var regexp = new RegExp("^http://", "i");
                    if (regexp.test(url)) {
                        url = url.substring(7);
                    }
                    $outUrl.val("http://komenuka.herokuapp.com/image/v1/" + encodeURIComponent(JSON.stringify(jsonObj)) + "/" + encodeURIComponent(url));
                }

                return {
                    "init": function(width, height){
                        stage.canvas.width = width;
                        stage.canvas.height = height;
                        shape = new createjs.Shape();
                        overlay = new createjs.Shape();
                        overlay.alpha = 0.7;
                        stage.addChild(shape);
                        stage.addChild(overlay);
                        jsonObj = {};

                        return this;
                    },
                    "publishRectangleEvents": function(){
                        stage.removeAllEventListeners();
                        stage.addEventListener("mousedown", function(mouseDownEvent){
                            var startX = mouseDownEvent.stageX, startY = mouseDownEvent.stageY;
                            mouseDownEvent.addEventListener("mousemove", function(mouseMoveEvent){
                                overlay.graphics.c().f("#" + $color.val()).r(startX, startY, mouseMoveEvent.stageX - startX, mouseMoveEvent.stageY - startY).ef();
                                stage.update();
                            });
                            mouseDownEvent.addEventListener("mouseup", function(mouseUpEvent){
                                overlay.graphics.c();
                                shape.graphics.f("#" + $color.val()).r(startX, startY, mouseUpEvent.stageX - startX, mouseUpEvent.stageY - startY).ef();
                                stage.update();
                                // update rectangle json
                                if (startX < mouseUpEvent.stageX) {
                                    var x1 = startX, x2 = mouseUpEvent.stageX;
                                } else {
                                    var x1 = mouseUpEvent.stageX, x2 = startX;
                                }
                                if (startY < mouseUpEvent.stageY) {
                                    var y1 = startY, y2 = mouseUpEvent.stageY;
                                } else {
                                    var y1 = mouseUpEvent.stageY, y2 = startY;   
                                }
                                var obj = {"x1": x1, "y1": y1, "x2": x2, "y2": y2};
                                if (!$color.val() || $color.val() !== "FFFFFF") {
                                    obj["color"] = "#" + $color.val();
                                }
                                updateJson({"rectangle": obj});
                            });
                        });
                    },
                    "publishAnnotateEvents": function(){
                        stage.removeAllEventListeners();
                        stage.addEventListener("mousedown", function(mouseDownEvent){
                            var text = new createjs.Text($("#drawText").val(), "30px Arial", "#000000");
                            text.x = mouseDownEvent.stageX;
                            text.y = mouseDownEvent.stageY;
                            text.alpha = 0.6;
                            stage.addChild(text);
                            stage.update();
                            mouseDownEvent.addEventListener("mousemove", function(mouseMoveEvent){
                                text.x = mouseMoveEvent.stageX;
                                text.y = mouseMoveEvent.stageY;
                                stage.update();
                            });
                            mouseDownEvent.addEventListener("mouseup", function(mouseUpEvent){
                                text.alpha = 1;
                                stage.update();
                                // update annotate json
                                updateJson({
                                    "annotate": {
                                        "x": mouseDownEvent.stageX,
                                        "y": mouseDownEvent.stageY,
                                        "text": text.text
                                    }
                                });
                            });
                        });
                    },
                    "publishTategakiEvents": function(){
                        stage.removeAllEventListeners();
                        stage.addEventListener("mousedown", function(mouseDownEvent){
                            var text = new createjs.TextEx($("#drawText").val(), "30px Arial", "#000000");
                            text.x = mouseDownEvent.stageX;
                            text.y = mouseDownEvent.stageY;
                            text.alpha = 0.6;
                            text.direction = "vertical";
                            text.textAlign = "center";
                            stage.addChild(text);
                            stage.update();
                            mouseDownEvent.addEventListener("mousemove", function(mouseMoveEvent){
                                text.x = mouseMoveEvent.stageX;
                                text.y = mouseMoveEvent.stageY;
                                stage.update();
                            });
                            mouseDownEvent.addEventListener("mouseup", function(mouseUpEvent){
                                text.alpha = 1;
                                stage.update();
                                // update tategaki json
                                updateJson({
                                    "tategaki": {
                                        "x": mouseDownEvent.stageX,
                                        "y": mouseDownEvent.stageY,
                                        "text": text.text
                                    }
                                });
                            });
                        });
                    }
                };
            };

            $("#imageUrlBtn").click(function(){
                var url = $("#imageUrlText").val();
                if (url) {
                    var stage = new createjs.Stage("canvas"),
                        img = new Image(),
                        komenuka = new KomenukaCanvas(stage);
                    var bmp = new createjs.Bitmap(img);
                    img.crossOrigin = "Anonymous";
                    img.onload = function(){
                        stage.addChild(bmp);
                        komenuka.init(img.width, img.height);
                        stage.update();
                    }
                    img.src = "/proxy?url=" + encodeURI(url); // Access-Control-Allow-Originで許可されていればproxyいらない

                    $("#rectangleBtn").click(function(){
                        komenuka.publishRectangleEvents();
                    });
                    $("#annotateBtn").click(function(){
                        //$("#drawText").show();
                        komenuka.publishAnnotateEvents();
                    });
                    $("#tategakiBtn").click(function(){
                        //$("#drawText").show();
                        komenuka.publishTategakiEvents();
                    });
                } else {
                    alert("please input");
                }
                return false;
            });

            $("#chkBtn").click(function(){
                document.getElementById("komenukaImg").src = $("#komenukaUrlText").val();
                return false;
            });
        });
        </script>
        <script type="text/javascript">(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','//www.google-analytics.com/analytics.js','ga');ga('create', 'UA-40683203-1', 'herokuapp.com');ga('send', 'pageview');</script>
    </body>
</html>