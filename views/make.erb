<!DOCTYPE html>
<html lang="ja">
    <head>
        <meta charset="utf-8" />
        <title>komenuka</title>
        <meta content="komenuka は、動的画像変換サービスです。" name="description" />
        <meta name="author" content="aaharu" />
        <link href="/css/bootstrap.min.css" rel="stylesheet" />
        <link href="/css/komenuka.css" rel="stylesheet" />
        <link href="/favicon.ico" rel="shortcut icon" type="image/x-icon" />
    </head>
    <body>
        <header>
            <h1>komenuka</h1>
            <p class="lead">URL for edited image.</p>
        </header>
        <form class="form-inline">
            <input id="imageUrlText" type="text" placeholder="Image URL" class="input-large" />
            <button id="imageUrlBtn" type="submit" class="btn">読み込む</button>
        </form>
        <div>
            <div>
                <div>
                    <button id="rectangleBtn">rectangle</button>
                </div>
                <div>
                    <button id="annotateBtn">annotate</button>
                    <button id="tategakiBtn">tategaki(dekitenaiyo)</button>
                    <input id="drawText" type="text" />
                </div>
            </div>
            <canvas id="canvas" width="0" height="0"></canvas>
        </div>
        <textarea id="outjson"></textarea><br />
        <input id="komenukaUrlText" type="text" /><button id="chkBtn">check</button>
        <img id="komenukaImg" src="http://placehold.jp/150x50.png" />
        <footer>
            using <a href="http://ossipedia.ipa.go.jp/ipafont/index.html">IPAex Font (IPAex Gothic)</a>, <a href="http://twitter.github.io/bootstrap/">Twitter Bootstrap</a> and <a href="https://www.heroku.com/">Heroku</a>.<br />
            <small>&#169; aaharu</small>
        </footer>
        <!--[if lt IE 9]>
            <script src="http://ajax.aspnetcdn.com/ajax/jquery/jquery-1.9.1.min.js"></script>
        <![endif]-->
        <!--[if gte IE 9]><!-->
            <script src="http://ajax.aspnetcdn.com/ajax/jquery/jquery-2.0.0.min.js"></script>
        <!--<![endif]-->
        <script src="http://code.createjs.com/easeljs-0.6.0.min.js"></script>
        <script type="text/javascript">
        $(function(){
            "use strict";
            var KomenukaCanvas = function KomenukaCanvas(stage){
                var shape, overlay, jsonObj;
                var $out = $("#outjson"), $outUrl = $("#komenukaUrlText");

                function updateJson(obj){
                    for (var k in obj) {
                        if (jsonObj[k] === undefined) {
                            jsonObj[k] = obj[k];
                        } else if (jsonObj[k] instanceof Array) {
                            jsonObj[k][(jsonObj[k]).length] = obj[k];
                        } else {
                            jsonObj[k] = [jsonObj[k], obj[k]];
                        }
                    }
                    $out.val(JSON.stringify(jsonObj));
                    $outUrl.val("http://komenuka.herokuapp.com/image/v1/" + encodeURI(JSON.stringify(jsonObj)) + "/" + encodeURI($("#imageUrlText").val()));
                }

                return {
                    "init": function(width, height){
                        stage.canvas.width = width;
                        stage.canvas.height = height;
                        shape = new createjs.Shape();
                        overlay = new createjs.Shape();
                        overlay.alpha = 0.7;
                        stage.addChild(shape);
                        stage.addChild(overlay);
                        jsonObj = {};

                        return this;
                    },
                    "publishRectangleEvents": function(){
                        stage.removeAllEventListeners();
                        stage.addEventListener("mousedown", function(mouseDownEvent) {
                            var startX = mouseDownEvent.stageX, startY = mouseDownEvent.stageY;
                            mouseDownEvent.addEventListener("mousemove", function(mouseMoveEvent) {
                                overlay.graphics.c().f("#ffffff").r(startX, startY, mouseMoveEvent.stageX - startX, mouseMoveEvent.stageY - startY).ef();
                                stage.update();
                            });
                            mouseDownEvent.addEventListener("mouseup", function(mouseUpEvent) {
                                overlay.graphics.c();
                                shape.graphics.f("#ffffff").r(startX, startY, mouseUpEvent.stageX - startX, mouseUpEvent.stageY - startY).ef();
                                stage.update();
                                // update rectangle json
                                if (startX < mouseUpEvent.stageX) {
                                    var x1 = startX, x2 = mouseUpEvent.stageX;
                                } else {
                                    var x1 = mouseUpEvent.stageX, x2 = startX;
                                }
                                if (startY < mouseUpEvent.stageY) {
                                    var y1 = startY, y2 = mouseUpEvent.stageY;
                                } else {
                                    var y1 = mouseUpEvent.stageY, y2 = startY;   
                                }
                                updateJson({
                                    "rectangle": {
                                        "x1": x1,
                                        "y1": y1,
                                        "x2": x2,
                                        "y2": y2
                                    }
                                });
                            });
                        });
                    },
                    "publishAnnotateEvents": function(){
                        stage.removeAllEventListeners();
                        stage.addEventListener("mousedown", function(mouseDownEvent) {
                            var text = new createjs.Text($("#drawText").val(), "30px Arial", "#000000");
                            text.x = mouseDownEvent.stageX;
                            text.y = mouseDownEvent.stageY;
                            stage.addChild(text);
                            stage.update();
                            
                            // update annotate json
                            updateJson({
                                "annotate": {
                                    "x": mouseDownEvent.stageX,
                                    "y": mouseDownEvent.stageY,
                                    "text": text.text
                                }
                            });
                        });
                    },
                    "publishTategakiEvents": function(){
                        stage.removeAllEventListeners();
                        //TODO
                        stage.addEventListener("mousedown", function(mouseDownEvent) {
                            var text = new createjs.Text($("#drawText").val(), "30px Arial", "#000000");
                            text.x = mouseDownEvent.stageX;
                            text.y = mouseDownEvent.stageY;
                            text.rotation = 90;
                            stage.addChild(text);
                            stage.update();
                            
                            // update tategaki json
                            updateJson({
                                "tategaki": {
                                    "x": mouseDownEvent.stageX,
                                    "y": mouseDownEvent.stageY,
                                    "text": text.text
                                }
                            });
                        });
                    }
                };
            };

            $("#imageUrlBtn").click(function(){
                var url = $("#imageUrlText").val();
                if (url) {
                    var stage = new createjs.Stage("canvas"),
                        img = new Image(),
                        komenuka = new KomenukaCanvas(stage);
                    var bmp = new createjs.Bitmap(img);
                    img.crossOrigin = "Anonymous";
                    img.onload = function(){
                        stage.addChild(bmp);
                        komenuka.init(img.width, img.height);
                        stage.update();
                    }
                    img.src = "/proxy?url=" + encodeURI(url); // Access-Control-Allow-Originで許可されていればproxyいらない

                    $("#rectangleBtn").click(function(){
                        komenuka.publishRectangleEvents();
                    });
                    $("#annotateBtn").click(function(){
                        $("#drawText").show();
                        komenuka.publishAnnotateEvents();
                    });
                    $("#tategakiBtn").click(function(){
                        $("#drawText").show();
                        komenuka.publishTategakiEvents();
                    });
                } else {
                    alert("please input");
                }
                return false;
            });

            $("#chkBtn").click(function(){
                document.getElementById("komenukaImg").src = $("#komenukaUrlText").val();
                //$("#komenukaImg").get().src = $("#komenukaUrlText").val();
            });
        });
        </script>
    </body>
</html>